#cloud-config

---
coreos:

  etcd2:
    advertise-client-urls: http://${ fqdn }:2379
    # cert-file: /etc/kubernetes/ssl/k8s-etcd.pem
    debug: true
    initial-advertise-peer-urls: https://${ fqdn }:2380
    # key-file: /etc/kubernetes/ssl/k8s-etcd-key.pem
    listen-client-urls: http://${ fqdn }:2379,http://127.0.0.1:2379
    listen-peer-urls: https://${ fqdn }:2380
    name: ${ fqdn } 
    discovery: ${ etcd_discovery }
    peer-trusted-ca-file: /etc/srv/kubernetes/pki/ca-certificates.crt
    peer-client-cert-auth: true
    peer-cert-file: /etc/srv/kubernetes/pki/etcd.crt
    peer-key-file: /etc/srv/kubernetes/pki/etcd.key

  units:
    - name: etcd2.service
      command: start

    - name: docker.service
      command: start
      drop-ins:
        - name: docker.conf
          content: |
            [Service]
            EnvironmentFile=/etc/default/docker
            # ExecStartPre=/usr/bin/ip link add name cbr0 type bridge

    - name: bins.service
      command: start
      content: |
        [Unit]
        Description=Download Binaries
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=/usr/bin/mkdir --parents /home/kubernetes/bin
        ExecStartPre=/usr/bin/curl -L -o /home/kubernetes/bin/kubelet https://storage.googleapis.com/kubernetes-release/release/v1.7.2/bin/linux/amd64/kubelet
        ExecStartPre=/usr/bin/curl -L -o /home/kubernetes/bin/cni.tar https://github.com/containernetworking/cni/releases/download/v0.5.2/cni-amd64-v0.5.2.tgz
        ExecStartPre=/usr/bin/tar -xvf /home/kubernetes/bin/cni.tar -C /opt/cni/bin/
        ExecStart=/usr/bin/chmod +x /home/kubernetes/bin/kubelet

    - name: socat.service
      command: start
      content: |
        [Unit]
        Description=Install Socat
        After=docker.service
        Requires=docker.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=/usr/bin/mkdir --parents /opt/bin
        ExecStart=/usr/bin/docker run --rm -v /opt/bin/:/socat/ registry.cncf.ci/cncf/cross-cloud/socat:ci-stable-v0-2-0 cp /output/linux/x86_64/socat /socat

    - name: kubelet.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes kubelet
        After=socat.service
        Requires=socat.service

        [Service]
        Restart=always
        RestartSec=10
        Environment="PATH=/opt/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        EnvironmentFile=/etc/default/kubelet
        ExecStart=/home/kubernetes/bin/kubelet $KUBELET_OPTS

        [Install]
        WantedBy=multi-user.target

  update:
    reboot-strategy: etcd-lock


write-files:

  - path: /etc/default/docker
    content: |
      DOCKER_OPTS="--ip-masq=false --iptables=false --log-driver=json-file --log-level=warn --log-opt=max-file=5 --log-opt=max-size=10m --storage-driver=overlay"

  - path: /etc/default/kubelet
    content: |
      KUBELET_OPTS="--allow-privileged=true --cgroup-root=/ --cloud-provider=azure --cloud-config=/etc/srv/kubernetes/azure-config.json --cluster-dns=100.64.0.10 --cluster-domain=cluster.local --enable-debugging-handlers=true --eviction-hard=memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%,imagefs.available<10%,imagefs.inodesFree<5% --hostname-override=${ fqdn } --kubeconfig=/var/lib/kubelet/kubeconfig --network-plugin-mtu=9001 --network-plugin=kubenet --node-labels=kubernetes.io/role=master --non-masquerade-cidr=100.64.0.0/10 --pod-infra-container-image=gcr.io/google_containers/pause-amd64:3.0 --pod-manifest-path=/etc/kubernetes/manifests --register-schedulable=true --register-with-taints=node-role.kubernetes.io/master=:NoSchedule --require-kubeconfig=true --v=2 --cni-bin-dir=/opt/cni/bin/ --cni-conf-dir=/etc/cni/net.d/ --network-plugin-dir=/opt/cni/bin/"

  - path: /var/lib/kubelet/kubeconfig
    encoding: "gzip+base64"
    content: |
      ${ kubelet_kubeconfig }

  - path: /etc/kubernetes/manifests/kube-apiserver.yml
    encoding: "gzip+base64"
    content: |
      ${ kube_apiserver }

  - path: /etc/kubernetes/manifests/kube-controller-manager.yml
    encoding: "gzip+base64"
    content: |
      ${ kube_controller_manager }

  - path: /var/lib/kube-controller-manager/kubeconfig
    encoding: "gzip+base64"
    content: |
      ${ kube_controller_manager_kubeconfig }

  - path: /etc/kubernetes/manifests/kube-scheduler.yml
    encoding: "gzip+base64"
    content: |
      ${ kube_scheduler }

  - path: /etc/srv/kubernetes/kube-scheduler/kubeconfig
    encoding: "gzip+base64"
    content: |
      ${ kube_scheduler_kubeconfig }

  - path: /etc/srv/kubernetes/pki/ca-certificates.crt
    permissions: "0644"
    encoding: "gzip+base64"
    content: |
      ${ ca }

  - path: /etc/srv/kubernetes/pki/ca-certificates.key
    permissions: "0644"
    encoding: "gzip+base64"
    content: |
      ${ ca_key }


  - path: /etc/srv/kubernetes/pki/apiserver.crt
    permissions: "0644"
    encoding: "gzip+base64"
    content: |
      ${ apiserver }

  - path: /etc/srv/kubernetes/pki/apiserver.key
    permissions: "0644"
    encoding: "gzip+base64"
    content: |
      ${ apiserver_key }

  - path: /etc/srv/kubernetes/pki/etcd.crt
    permissions: "0644"
    encoding: "gzip+base64"
    content: |
      ${ etcd }

  - path: /etc/srv/kubernetes/pki/etcd.key
    permissions: "0644"
    encoding: "gzip+base64"
    content: |
      ${ etcd_key }

  - path: /etc/srv/kubernetes/azure-config.json
    permissions: "0644"
    encoding: "gzip+base64"
    content: |
      ${ cloud_config }

  - path: /etc/srv/kubernetes/known_tokens.csv
    permissions: "0644"
    encoding: "gzip+base64"
    content: |
      ${ known_tokens_csv }

  - path: /etc/srv/kubernetes/basic_auth.csv
    permissions: "0644"
    encoding: "gzip+base64"
    content: |
      ${ basic_auth_csv }

  - path: /etc/srv/kubernetes/abac-authz-policy.jsonl
    permissions: "0644"
    encoding: "gzip+base64"
    content: |
      ${ abac_authz_policy }


