variables:
  K8S_BRANCH: ci-v1.6.3
  COREDNS_BRANCH: ci-v007
  PROMETHEUS_BRANCH: ci-v1.6.3
  NODE_EXPORTER_BRANCH: ci-v0.14.0
  ALERTMANAGER_BRANCH: ci-v0.6.2

stages:
  - project-artifacts
  - k8s
  - coredns
  - prometheus

before_script:
  - export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
  - export KUBECONFIG=$(pwd)/data/${CI_ENVIRONMENT_SLUG}/kubeconfig
  - if [ -d data ] ; then . data/*vars ; fi

kubernetes:
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: project-artifacts
  script:
    - KUBERNETES_RELEASE_VARS=$(curl -L
        "$BASE_URL/kubernetes/kubernetes/builds/artifacts/${K8S_BRANCH}/file/ci.vars?job=build"
        |  sed -n 's/.*href="\([^"]*\).*/\1/p' | grep artifacts/raw | tail -1)
    - mkdir -p data
    - curl -o data/kubernetes.vars -L ${BASE_URL}/$KUBERNETES_RELEASE_VARS
    - cat data/kubernetes.vars
    - KUBERNETES_TAG=$(grep image_tag data/kubernetes.vars | awk -F= '{print $2}')
    - echo "kubernetes release - $KUBERNETES_TAG"
  artifacts:
    when: always
    expire_in: 4 weeks
    paths:
      - ./data/

coredns:
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: project-artifacts
  script:
    - COREDNS_RELEASE_PROPERTIES=$(curl -L
        "$BASE_URL/coredns/coredns/builds/artifacts/${COREDNS_BRANCH}/file/release.properties?job=release"
        |  sed -n 's/.*href="\([^"]*\).*/\1/p' | grep artifacts/raw | tail -1)
    - mkdir -p data
    - curl -o data/coredns.properties -L ${BASE_URL}/$COREDNS_RELEASE_PROPERTIES
    - cat data/coredns.properties
    - COREDNS_TAG=$(grep image.tag data/coredns.properties  | awk -F= '{print $2}')
    - echo "coredns release - $COREDNS_TAG"
  artifacts:
    when: always
    expire_in: 4 weeks
    paths:
      - ./data/

prometheus:
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: project-artifacts
  script:
    - echo "$BASE_URL/prometheus/prometheus/builds/artifacts/${PROMETHEUS_BRANCH}/file/release.properties?job=release" | tee -a urls.txt
    - echo "$BASE_URL/prometheus/node_exporter/builds/artifacts/${NODE_EXPORTER_BRANCH}/file/release.properties?job=release" | tee -a urls.txt
    - echo "$BASE_URL/prometheus/alertmanager/builds/artifacts/${ALERTMANAGER_BRANCH}/file/release.properties?job=release" | tee -a urls.txt
    - PROMETHEUS_RELEASE_PROPERTIES=$(xargs <urls.txt curl -L | sed -n 's/.*href="\([^"]*\).*/\1/p' | grep artifacts/raw | tail -1)
    - mkdir -p data
    - curl -o data/prometheus.properties -L ${BASE_URL}/$PROMETHEUS_RELEASE_PROPERTIES
    - cat data/prometheus.properties
    - PROMETHEUS_TAG=$(grep image.tag data/prometheus.properties  | awk -F= '{print $2}')
    - echo "prometheus release - $PROMETHEUS_TAG"
  artifacts:
    when: always
    expire_in: 4 weeks
    paths:
      - ./data/

cross-cloud:
  stage: project-artifacts
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE/provisioning:$CI_COMMIT_REF_SLUG" .
    - docker push "$CI_REGISTRY_IMAGE/provisioning:$CI_COMMIT_REF_SLUG"

.k8s_deploy_template: &k8s_deploy_template
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: k8s
  variables:
    CLOUD: MUST BE SET 
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.cncf.ci/
    on_stop: MUST BE SET
  script:
    - /cncf/provision.sh ${CLOUD}-deploy ${CI_ENVIRONMENT_SLUG}
  artifacts:
    when: always
    expire_in: 4 weeks
    paths:
      - ./data/

.k8s_e2e_template: &k8s_e2e_template
  image: ${CI_REGISTRY}/kubernetes/kubernetes/kubernetes-e2e:ci-v1-6-3.job.4793
  stage: k8s
  when: manual
  # dependencies:
  #   - k8s_deploy_aws
  variables:
    CLOUD: MUST BE SET 
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
  script:
  - export KUBECONFIG=$(pwd)/data/${CI_ENVIRONMENT_SLUG}/kubeconfig
  - DEPLOYED_HYPERKUBE_IMAGE="$(kubectl describe pods  --namespace=kube-system  | grep cncf.ci| grep -v ID| uniq | awk '{print $2}')"
  - echo Deployed HyperKube Image - $DEPLOYED_HYPERKUBE_IMAGE
  - /kubernetes/e2e/run-conformance.sh

.k8s_cloud_destroy_template: &k8s_cloud_destroy_template
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: k8s
  when: manual
  variables:
    CLOUD:  MUST BE SET
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    action: stop
  script:
    - /cncf/provision.sh ${CLOUD}-destroy ${CI_ENVIRONMENT_SLUG}

.coredns_deploy_template: &coredns_deploy_template
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: coredns
  # when: manual
  variables:
    CLOUD: MUST BE SET
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
  script:
    - find ./data/
    - ls -la $(pwd)/data/${CI_ENVIRONMENT_SLUG}/
    - kubectl get nodes
    - kubectl get pods
    - kubectl get componentstatuses
    - helm init
    - echo Removing any previous deploys of coredns
    - helm get coredns > /dev/null && helm delete --purge coredns
    - COREDNS_IMAGE_SETTINGS=$(cat data/coredns.properties
        | xargs -n 1 echo \ --set |  awk '!/0$/{printf $0} /0$/')
    - COREDNS_INSTALL="helm install --name coredns ${COREDNS_IMAGE_SETTINGS}
        --set middleware.kubernetes.clusterCidr=10.0.0.0/24
        --set middleware.kubernetes.clusterIP=10.0.0.10
        stable/coredns"
    - echo $COREDNS_INSTALL ; $COREDNS_INSTALL
    - DEPLOYED_COREDNS_IMAGE=$(kubectl get pods -l k8s-app=coredns -o jsonpath="{.items[0].spec.containers[0].image}")
    - echo Deployed CoreDNS Image - $DEPLOYED_COREDNS_IMAGE
    - kubectl get svc
    - kubectl get pods

.coredns_e2e_template: &coredns_e2e_template
  image: ${CI_REGISTRY}/coredns/coredns/coredns-e2e:ci-v007.job.4744
  stage: coredns
  when: manual
  # dependencies:
  #   - coredns_deploy_aws
  variables:
    CLOUD: MUST BE SET
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
  script:
  - export KUBECONFIG=$(pwd)/data/${CI_ENVIRONMENT_SLUG}/kubeconfig
  - kubectl proxy --port 8080 &
  - kubectl create -f /coredns/e2e/test.yml || true
  - cd /go/src/github.com/coredns/coredns/test
  - go test -v -tags k8s

.prometheus_deploy_template: &prometheus_deploy_template
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: prometheus
  # when: manual
  variables:
    CLOUD:  must be set
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
  script:
    - find ./data/
    - ls -la $(pwd)/data/${CI_ENVIRONMENT_SLUG}/
    - kubectl get nodes
    - kubectl get pods
    - kubectl get componentstatuses
    - helm init
    - echo sleeping untill tiller is ready
    - sleep 5
    - echo Removing any previous deploys of prometheus
    - helm get prometheus > /dev/null && helm delete --purge prometheus
    - PROMETHEUS_IMAGE_SETTINGS=$(cat data/prometheus.properties
        | xargs -n 1 echo \ --set |  awk '!/0$/{printf $0} /0$/')
    - PROMETHEUS_INSTALL="helm install --name prometheus ${PROMETHEUS_IMAGE_SETTINGS}
        stable/prometheus"
    - echo $PROMETHEUS_INSTALL ; $PROMETHEUS_INSTALL
    - DEPLOYED_PROMETHEUS_IMAGE="$(kubectl describe pods -l app=prometheus,component=server  | grep cncf.ci| grep prometheus | awk '{print $2}')"
    - echo Deployed Prometheus Image - $DEPLOYED_PROMETHEUS_IMAGE
    - kubectl get svc
    - kubectl get pods

.prometheus_e2e_template: &prometheus_e2e_template
  image: ${CI_REGISTRY}/coredns/coredns/coredns-e2e:ci-v007.job.4744
  stage: prometheus
  when: manual
  # dependencies:
  #   - prometheus_deploy_aws
  variables:
    CLOUD: MUST BE SET
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
  script:
  - export KUBECONFIG=$(pwd)/data/${CI_ENVIRONMENT_SLUG}/kubeconfig
  - echo FIXME && exit 1

aws_deploy_k8s:
  <<: *k8s_deploy_template
  variables:
    CLOUD: aws
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.cncf.ci/
    on_stop: aws_destroy_k8s

aws_e2e_k8s:
  <<: *k8s_e2e_template
  variables:
    CLOUD: aws

aws_destroy_k8s:
  <<: *k8s_cloud_destroy_template
  variables:
    CLOUD: aws

aws_deploy_coredns:
  <<: *coredns_deploy_template
  variables:
    CLOUD: aws
  dependencies:
    - aws_deploy_k8s

aws_e2e_coredns:
  <<: *coredns_e2e_template
  variables:
    CLOUD: aws

aws_deploy_prom:
  <<: *prometheus_deploy_template
  variables:
    CLOUD: aws
  dependencies:
    - aws_deploy_k8s

aws_e2e_prom:
  <<: *prometheus_e2e_template
  variables:
    CLOUD: aws

packet_deploy_k8s:
  <<: *k8s_deploy_template
  variables:
    CLOUD: packet
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.cncf.ci/
    on_stop: packet_destroy_k8s

packet_e2e_k8s:
  <<: *k8s_e2e_template
  variables:
    CLOUD: packet

packet_destroy_k8s:
  <<: *k8s_cloud_destroy_template
  variables:
    CLOUD: packet

packet_deploy_coredns:
  <<: *coredns_deploy_template
  variables:
    CLOUD: packet
  dependencies:
    - packet_deploy_k8s

packet_e2e_coredns:
  <<: *coredns_e2e_template
  variables:
    CLOUD: packet

packet_deploy_prom:
  <<: *prometheus_deploy_template
  variables:
    CLOUD: packet
  dependencies:
    - packet_deploy_k8s

packet_e2e_prom:
  <<: *prometheus_e2e_template
  variables:
    CLOUD: packet
