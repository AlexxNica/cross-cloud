stages:
  - docker-build
  - project-artifacts
  - request-clouds
  - use-clouds
  - destroy-clouds

before_script:
  - export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
  - export KUBECONFIG=$(pwd)/data/${CI_ENVIRONMENT_SLUG}/kubeconfig
  - if [ -d data ] ; then . data/*vars ; fi

kubernetes:
  variables:
    K8S_BRANCH: ci-master
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: project-artifacts
  script:
    - KUBERNETES_RELEASE_VARS=$(curl -L
        "$BASE_URL/kubernetes/kubernetes/builds/artifacts/${K8S_BRANCH}/file/ci.vars?job=build"
        |  sed -n 's/.*href="\([^"]*\).*/\1/p' | grep artifacts/raw | tail -1)
    - mkdir -p data
    - curl -o data/kubernetes.vars -L ${BASE_URL}/$KUBERNETES_RELEASE_VARS
    - KUBERNETES_TAG=$(grep image_tag data/kubernetes.vars | awk -F= '{print $2}')
    - echo "kubernetes release - $KUBERNETES_TAG"
  artifacts:
    when: always
    expire_in: 4 weeks
    paths:
      - ./data/

coredns:
  variables:
    COREDNS_BRANCH: ci-master
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: project-artifacts
  script:
    - COREDNS_RELEASE_PROPERTIES=$(curl -L
        "$BASE_URL/coredns/coredns/builds/artifacts/${COREDNS_BRANCH}/file/release.properties?job=release"
        |  sed -n 's/.*href="\([^"]*\).*/\1/p' | grep artifacts/raw | tail -1)
    - mkdir -p data
    - curl -o data/coredns.properties -L ${BASE_URL}/$COREDNS_RELEASE_PROPERTIES
    - COREDNS_TAG=$(grep image.tag data/coredns.properties  | awk -F= '{print $2}')
    - echo "coredns release - $COREDNS_TAG"
  artifacts:
    when: always
    expire_in: 4 weeks
    paths:
      - ./data/

prometheus:
  variables:
    PROMETHEUS_BRANCH: ci-stable
    NODE_EXPORTER_BRANCH: ci-stable
    ALERTMANAGER_BRANCH: ci-stable
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: project-artifacts
  script:
    - echo "$BASE_URL/prometheus/prometheus/builds/artifacts/${PROMETHEUS_BRANCH}/file/release.properties?job=release" | tee -a urls.txt
    - echo "$BASE_URL/prometheus/node_exporter/builds/artifacts/${NODE_EXPORTER_BRANCH}/file/release.properties?job=release" | tee -a urls.txt
    - echo "$BASE_URL/prometheus/alertmanager/builds/artifacts/${ALERTMANAGER_BRANCH}/file/release.properties?job=release" | tee -a urls.txt
    - PROMETHEUS_RELEASE_PROPERTIES=$(xargs <urls.txt curl -L | sed -n 's/.*href="\([^"]*\).*/\1/p' | grep artifacts/raw | tail -1)
    - mkdir -p data
    - curl -o data/prometheus.properties -L ${BASE_URL}/$PROMETHEUS_RELEASE_PROPERTIES
    - PROMETHEUS_TAG=$(grep image.tag data/prometheus.properties  | awk -F= '{print $2}')
    - echo "prometheus release - $PROMETHEUS_TAG"
  artifacts:
    when: always
    expire_in: 4 weeks
    paths:
      - ./data/

provisioning:
  stage: docker-build
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE/$CI_JOB_NAME:$CI_COMMIT_REF_SLUG" .
    - docker push "$CI_REGISTRY_IMAGE/$CI_JOB_NAME:$CI_COMMIT_REF_SLUG"

deploy_aws:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: request-clouds
  variables:
    CLOUD: aws
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.cncf.ci/
    on_stop: destroy_aws
  script:
    - /cncf/provision.sh ${CLOUD}-deploy ${CI_ENVIRONMENT_SLUG}
  artifacts:
    when: always
    expire_in: 4 weeks
    paths:
      - ./data/

use_aws:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: use-clouds
  dependencies:
    - deploy_aws
  variables:
    CLOUD: aws
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    on_stop: destroy_aws
  script:
    - find ./data/
    - ls -la $(pwd)/data/${CI_ENVIRONMENT_SLUG}/
    - kubectl get nodes
    - kubectl get pods
    - kubectl get componentstatuses
    - helm init
    - echo Removing any previous deploys of coredns
    - helm get coredns > /dev/null && helm delete --purge coredns
    - echo Removing any previous deploys of prometheus
    - helm get prometheus > /dev/null && helm delete --purge prometheus
    - COREDNS_IMAGE_SETTINGS=$(cat data/coredns.properties
        | xargs -n 1 echo \ --set |  awk '!/0$/{printf $0} /0$/')
    - PROMETHEUS_IMAGE_SETTINGS=$(cat data/prometheus.properties
        | xargs -n 1 echo \ --set |  awk '!/0$/{printf $0} /0$/')
    - helm install --name coredns ${COREDNS_IMAGE_SETTINGS}
        --set middleware.kubernetes.clusterCidr=10.3.0.0/24
        --set middleware.kubernetes.clusterIP=10.3.0.10
        stable/coredns
    - helm install --name prometheus ${PROMETHEUS_IMAGE_SETTINGS}
        stable/prometheus
    - DEPLOYED_PROMETHEUS_IMAGE=$(kubectl get pods -l k8s-app=prometheus -o jsonpath="{.items[0].spec.containers[0].image}")
    - DEPLOYED_COREDNS_IMAGE=$(kubectl get pods -l k8s-app=coredns -o jsonpath="{.items[0].spec.containers[0].image}")
    - DEPLOYED_HYPERKUBE_IMAGE="$(kubectl describe pods  --namespace=kube-system  | grep cncf.ci| grep -v ID| uniq | awk '{print $2}')"
        | xargs -n 1 echo \ --set |  awk '!/0$/{printf $0} /0$/')
    - DEPLOYED_PROMETHEUS_IMAGE="$(kubectl describe pods -l app=prometheus,component=server  | grep cncf.ci| grep prometheus | awk '{print $2}'"
    - echo Deployed HyperKube Image - $DEPLOYED_HYPERKUBE_IMAGE
    - echo Deployed CoreDNS Image - $DEPLOYED_COREDNS_IMAGE
    - echo Deployed Prometheus Image - $DEPLOYED_PROMETHEUS_IMAGE
    - kubectl get svc
    - kubectl get pods

destroy_aws:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: destroy-clouds
  when: manual
  variables:
    CLOUD: aws
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    action: stop
  script:
    - /cncf/provision.sh ${CLOUD}-destroy ${CI_ENVIRONMENT_SLUG}

deploy_gke:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: request-clouds
  when: manual
  variables:
    CLOUD: gke
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.cncf.ci/
    on_stop: destroy_gke
  script:
    - /cncf/provision.sh ${CLOUD}-deploy ${CI_ENVIRONMENT_SLUG}
  artifacts:
    when: always
    expire_in: 4 weeks
    paths:
      - ./data/

use_gke:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: use-clouds
  when: manual
  dependencies:
    - deploy_gke
  variables:
    CLOUD: gke
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    on_stop: destroy_gke
  script:
    - export KUBECONFIG=$(pwd)/data/${CI_ENVIRONMENT_SLUG}/kubeconfig
    - kubectl get nodes
    - kubectl get pods
    - kubectl get componentstatuses

destroy_gke:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: destroy-clouds
  when: manual
  variables:
    CLOUD: gke
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    action: stop
  script:
    - /cncf/provision.sh ${CLOUD}-destroy ${CI_ENVIRONMENT_SLUG}

deploy_azure:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: request-clouds
  when: manual
  variables:
    CLOUD: azure
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.cncf.ci/
    on_stop: destroy_gke
  script:
    - /cncf/provision.sh ${CLOUD}-deploy ${CI_ENVIRONMENT_SLUG}
  artifacts:
    when: always
    expire_in: 4 weeks
    paths:
      - ./data/

use_azure:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: use-clouds
  when: manual
  dependencies:
    - deploy_azure
  variables:
    CLOUD: azure
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    on_stop: destroy_gke
  script:
    - kubectl get nodes
    - kubectl get pods
    - kubectl get componentstatuses

destroy_azure:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: destroy-clouds
  when: manual
  variables:
    CLOUD: azure
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    action: stop
  script:
    - /cncf/provision.sh ${CLOUD}-destroy ${CI_ENVIRONMENT_SLUG}

deploy_packet:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: request-clouds
  when: manual
  variables:
    CLOUD: packet
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.cncf.ci/
    on_stop: destroy_packet
  script:
    - /cncf/provision.sh ${CLOUD}-deploy ${CI_ENVIRONMENT_SLUG}
  artifacts:
    when: always
    expire_in: 4 weeks
    paths:
      - ./data/

use_packet:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: use-clouds
  when: manual
  dependencies:
    - deploy_packet
  variables:
    CLOUD: packet
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    on_stop: destroy_packet
  script:
    - export KUBECONFIG=$(pwd)/data/${CI_ENVIRONMENT_SLUG}/kubeconfig
    - kubectl get nodes
    - kubectl get pods
    - kubectl get componentstatuses

destroy_packet:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: destroy-clouds
  when: manual
  variables:
    CLOUD: packet
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    action: stop
  script:
    - /cncf/provision.sh ${CLOUD}-destroy ${CI_ENVIRONMENT_SLUG}

deploy_gce:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: request-clouds
  when: manual
  variables:
    CLOUD: gce
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.cncf.ci/
    on_stop: destroy_gce
  script:
    - /cncf/provision.sh ${CLOUD}-deploy ${CI_ENVIRONMENT_SLUG}
  artifacts:
    when: always
    expire_in: 4 weeks
    paths:
      - ./data/

use_gce:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: use-clouds
  when: manual
  dependencies:
    - deploy_gce
  variables:
    CLOUD: gce
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    on_stop: destroy_gce
  script:
    - kubectl get nodes
    - kubectl get pods
    - kubectl get componentstatuses

destroy_gce:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: destroy-clouds
  when: manual
  variables:
    CLOUD: gce
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    action: stop
  script:
    - /cncf/provision.sh ${CLOUD}-destroy ${CI_ENVIRONMENT_SLUG}

