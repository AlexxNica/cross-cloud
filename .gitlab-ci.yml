stages:
  - docker-build
  - project-artifacts
  - request-clouds
  - use-clouds
  - destroy-clouds

before_script:
  - export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
  - export KUBECONFIG=$(pwd)/data/${CI_ENVIRONMENT_SLUG}/kubeconfig
  - if [ -d data ] ; then . data/*vars ; fi
artifacts:
  when: always
  expire_in: 4 weeks
  paths:
    - ./data/


kubernetes:
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: project-artifacts
  script:
    - KUBERNETES_RELEASE_VARS=$(curl -L
        "$BASE_URL/kubernetes/kubernetes/builds/artifacts/ci-v1.6.3/file/ci.vars?job=build"
        |  sed -n 's/.*href="\([^"]*\).*/\1/p' | grep artifacts/raw | tail -1)
    - mkdir -p data
    - curl -o data/kubernetes.vars -L ${BASE_URL}/$KUBERNETES_RELEASE_VARS
    - KUBERNETES_TAG=$(grep image_tag data/kubernetes.vars | awk -F= '{print $2}')
    - echo "kubernetes release - $KUBERNETES_TAG"

coredns:
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: project-artifacts
  script:
    - COREDNS_RELEASE_PROPERTIES=$(curl -L
        "$BASE_URL/coredns/coredns/builds/artifacts/master/file/release.properties?job=release"
        |  sed -n 's/.*href="\([^"]*\).*/\1/p' | grep artifacts/raw | tail -1)
    - mkdir -p data
    - curl -o data/coredns.properties -L ${BASE_URL}/$COREDNS_RELEASE_PROPERTIES
    - COREDNS_TAG=$(grep image.tag data/coredns.properties  | awk -F= '{print $2}')
    - echo "coredns release - $COREDNS_TAG"

provisioning:
  stage: docker-build
  except:
    - triggers
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE/$CI_JOB_NAME:$CI_COMMIT_REF_SLUG" .
    - docker push "$CI_REGISTRY_IMAGE/$CI_JOB_NAME:$CI_COMMIT_REF_SLUG"

deploy_aws:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: request-clouds
  when: manual
  variables:
    CLOUD: aws
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.cncf.ci/
    on_stop: destroy_aws
  script:
    - /cncf/provision.sh ${CLOUD}-deploy ${CI_ENVIRONMENT_SLUG}

use_aws:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: use-clouds
  when: manual
  variables:
    CLOUD: aws
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    on_stop: destroy_aws
  script:
    - find ./data/
    - ls -la $(pwd)/data/${CI_ENVIRONMENT_SLUG}/
    - kubectl get nodes
    - kubectl get pods
    - kubectl get componentstatuses

destroy_aws:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: destroy-clouds
  when: manual
  variables:
    CLOUD: aws
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    action: stop
  script:
    - /cncf/provision.sh ${CLOUD}-destroy ${CI_ENVIRONMENT_SLUG}

deploy_gke:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: request-clouds
  when: manual
  variables:
    CLOUD: gke
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.cncf.ci/
    on_stop: destroy_gke
  script:
    - /cncf/provision.sh ${CLOUD}-deploy ${CI_ENVIRONMENT_SLUG}

use_gke:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: use-clouds
  when: manual
  variables:
    CLOUD: gke
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    on_stop: destroy_gke
  script:
    - export KUBECONFIG=$(pwd)/data/${CI_ENVIRONMENT_SLUG}/kubeconfig
    - kubectl get nodes
    - kubectl get pods
    - kubectl get componentstatuses

destroy_gke:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: destroy-clouds
  when: manual
  variables:
    CLOUD: gke
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    action: stop
  script:
    - /cncf/provision.sh ${CLOUD}-destroy ${CI_ENVIRONMENT_SLUG}

deploy_azure:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: request-clouds
  when: manual
  variables:
    CLOUD: azure
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.cncf.ci/
    on_stop: destroy_gke
  script:
    - /cncf/provision.sh ${CLOUD}-deploy ${CI_ENVIRONMENT_SLUG}

use_azure:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: use-clouds
  when: manual
  variables:
    CLOUD: azure
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    on_stop: destroy_gke
  script:
    - kubectl get nodes
    - kubectl get pods
    - kubectl get componentstatuses

destroy_azure:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: destroy-clouds
  when: manual
  variables:
    CLOUD: azure
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    action: stop
  script:
    - /cncf/provision.sh ${CLOUD}-destroy ${CI_ENVIRONMENT_SLUG}

deploy_packet:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: request-clouds
  when: manual
  variables:
    CLOUD: packet
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.cncf.ci/
    on_stop: destroy_packet
  script:
    - /cncf/provision.sh ${CLOUD}-deploy ${CI_ENVIRONMENT_SLUG}

use_packet:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: use-clouds
  when: manual
  variables:
    CLOUD: packet
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    on_stop: destroy_packet
  script:
    - export KUBECONFIG=$(pwd)/data/${CI_ENVIRONMENT_SLUG}/kubeconfig
    - kubectl get nodes
    - kubectl get pods
    - kubectl get componentstatuses

destroy_packet:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: destroy-clouds
  when: manual
  variables:
    CLOUD: packet
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    action: stop
  script:
    - /cncf/provision.sh ${CLOUD}-destroy ${CI_ENVIRONMENT_SLUG}

deploy_packet:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: request-clouds
  when: manual
  variables:
    CLOUD: packet
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.cncf.ci/
    on_stop: destroy_packet
  script:
    - /cncf/provision.sh ${CLOUD}-deploy ${CI_ENVIRONMENT_SLUG}

use_packet:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: use-clouds
  when: manual
  variables:
    CLOUD: packet
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    on_stop: destroy_packet
  script:
    - kubectl get nodes
    - kubectl get pods
    - kubectl get componentstatuses

destroy_packet:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: destroy-clouds
  when: manual
  variables:
    CLOUD: packet
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    action: stop
  script:
    - /cncf/provision.sh ${CLOUD}-destroy ${CI_ENVIRONMENT_SLUG}

deploy_gce:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: request-clouds
  when: manual
  variables:
    CLOUD: gce
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.cncf.ci/
    on_stop: destroy_gce
  script:
    - /cncf/provision.sh ${CLOUD}-deploy ${CI_ENVIRONMENT_SLUG}

use_gce:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: use-clouds
  when: manual
  variables:
    CLOUD: gce
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    on_stop: destroy_gce
  script:
    - kubectl get nodes
    - kubectl get pods
    - kubectl get componentstatuses

destroy_gce:
  allow_failure: true
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: destroy-clouds
  when: manual
  variables:
    CLOUD: gce
  environment:
    name: ${CLOUD}-${CI_COMMIT_REF_SLUG}
    url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/
    action: stop
  script:
    - /cncf/provision.sh ${CLOUD}-destroy ${CI_ENVIRONMENT_SLUG}

