#cloud-config

---
coreos:

  etcd2:
    discovery-srv: ${ internal_tld }
    peer-trusted-ca-file: /etc/kubernetes/ssl/ca.pem
    peer-client-cert-auth: true
    peer-cert-file: /etc/kubernetes/pki/kubelet.crt
    peer-key-file: /etc/kubernetes/ssl/kubelet.key
    proxy: on

  units:
    - name: etcd2.service
      command: start

    - name: docker.service
      command: start

    - name: bins.service
      command: start
      content: |
        [Unit]
        Description=Download Binaries
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=/usr/bin/mkdir --parents /opt/cni/bin
        ExecStartPre=/usr/bin/mkdir --parents /etc/cni/net.d
        ExecStartPre=/usr/bin/mkdir --parents /home/kubernetes/bin
        ExecStartPre=/usr/bin/curl -L -o /home/kubernetes/bin/kubelet https://storage.googleapis.com/kubernetes-release/release/v1.6.6/bin/linux/amd64/kubelet
        ExecStartPre=/usr/bin/curl -L -o /tmp/cni.tar https://github.com/containernetworking/cni/releases/download/v0.5.2/cni-amd64-v0.5.2.tgz
        ExecStartPre=/usr/bin/tar -xvf /tmp/cni.tar -C /opt/cni/bin/
        ExecStart=/usr/bin/chmod +x /home/kubernetes/bin/kubelet

    - name: socat.service
      command: start
      content: |
        [Unit]
        Description=Install Socat
        After=bins.service
        Requires=bins.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/bash -c "curl https://gitlab.cncf.ci/cncf/cross-cloud/raw/ci-stable-v0.2.0/socat.sh |  bash"

    - name: kubelet.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes kubelet
        After=socat.service
        Requires=socat.service

        [Service]
        Restart=always
        RestartSec=10
        Environment="PATH=/opt/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        EnvironmentFile=/etc/default/kubelet
        ExecStart=/home/kubernetes/bin/kubelet $KUBELET_OPTS

        [Install]
        WantedBy=multi-user.target

  update:
    reboot-strategy: etcd-lock

write-files:

  - path: /etc/default/kubelet
    content: |
      KUBELET_OPTS=" \
      --api-servers=https://master.${ internal_tld } \
      --enable-debugging-handlers=true \
      --cloud-provider=aws \ 
      --pod-manifest-path=/etc/kubernetes/manifests \
      --allow-privileged=True \
      --v=2 \
      --cluster-dns=10.0.0.10 \ 
      --cluster-domain=cluster.local \
      --cgroup-root=/ \
      --system-cgroups=/system \ 
      --network-plugin=kubenet \
      --hairpin-mode=promiscuous-bridge \
      --runtime-cgroups=/docker-daemon \
      --kubelet-cgroups=/kubelet \
      --babysit-daemons=true \
      --anonymous-auth=false \
      --client-ca-file=/etc/kubernetes/pki/ca-certificates.crt \
      --feature-gates=ExperimentalCriticalPodAnnotation=true \
      "

  - path: /etc/kubernetes/manifests/kube-proxy.yml
    content: |
      ${ kube_proxy }

  - path: /var/lib/kube-proxy/kubeconfig
    content: |
      apiVersion: v1
      kind: Config
      clusters:
      - name: local
        cluster:
          certificate-authority: /etc/kubernetes/pki/ca-certificates.crt
      users:
      - name: kube-proxy
        user:
          client-certificate: /etc/kubernetes/pki/kubelet.crt
          client-key: /etc/kubernetes/pki/kubelet.key
      contexts:
      - context:
          cluster: local
          user: kube-proxy
        name: service-account-context
      current-context: service-account-context

  - path: /etc/kubernetes/pki/ca-certificates.crt
    permissions: "0644"
    encoding: "gzip+base64"
    content: |
      ${ ca }
      
  - path: /etc/kubernetes/ssl/kubelet.crt
    permissions: "0644"
    encoding: "gzip+base64"
    content: |
      ${ worker }
      
  - path: /etc/kubernetes/ssl/kubelet.key
    permissions: "0644"
    encoding: "gzip+base64"
    content: |
      ${ worker_key }
